// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	cryptokeys "github.com/mittwald/go-powerdns/apis/cryptokeys"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// CreateCryptokey provides a mock function with given fields: ctx, serverID, zoneID, opts
func (_m *Client) CreateCryptokey(ctx context.Context, serverID string, zoneID string, opts cryptokeys.Cryptokey) (*cryptokeys.Cryptokey, error) {
	ret := _m.Called(ctx, serverID, zoneID, opts)

	var r0 *cryptokeys.Cryptokey
	if rf, ok := ret.Get(0).(func(context.Context, string, string, cryptokeys.Cryptokey) *cryptokeys.Cryptokey); ok {
		r0 = rf(ctx, serverID, zoneID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cryptokeys.Cryptokey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, cryptokeys.Cryptokey) error); ok {
		r1 = rf(ctx, serverID, zoneID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCryptokey provides a mock function with given fields: ctx, serverID, zoneID, cryptokeyID
func (_m *Client) DeleteCryptokey(ctx context.Context, serverID string, zoneID string, cryptokeyID int) error {
	ret := _m.Called(ctx, serverID, zoneID, cryptokeyID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) error); ok {
		r0 = rf(ctx, serverID, zoneID, cryptokeyID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCryptokey provides a mock function with given fields: ctx, serverID, zoneID, cryptokeyID
func (_m *Client) GetCryptokey(ctx context.Context, serverID string, zoneID string, cryptokeyID int) (*cryptokeys.Cryptokey, error) {
	ret := _m.Called(ctx, serverID, zoneID, cryptokeyID)

	var r0 *cryptokeys.Cryptokey
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) *cryptokeys.Cryptokey); ok {
		r0 = rf(ctx, serverID, zoneID, cryptokeyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cryptokeys.Cryptokey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int) error); ok {
		r1 = rf(ctx, serverID, zoneID, cryptokeyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCryptokeys provides a mock function with given fields: ctx, serverID, zoneID
func (_m *Client) ListCryptokeys(ctx context.Context, serverID string, zoneID string) ([]cryptokeys.Cryptokey, error) {
	ret := _m.Called(ctx, serverID, zoneID)

	var r0 []cryptokeys.Cryptokey
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []cryptokeys.Cryptokey); ok {
		r0 = rf(ctx, serverID, zoneID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cryptokeys.Cryptokey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, serverID, zoneID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToggleCryptokey provides a mock function with given fields: ctx, serverID, zoneID, cryptokeyID
func (_m *Client) ToggleCryptokey(ctx context.Context, serverID string, zoneID string, cryptokeyID int) error {
	ret := _m.Called(ctx, serverID, zoneID, cryptokeyID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) error); ok {
		r0 = rf(ctx, serverID, zoneID, cryptokeyID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
