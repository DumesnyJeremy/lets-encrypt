// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	zones "github.com/mittwald/go-powerdns/apis/zones"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// AddRecordSetToZone provides a mock function with given fields: ctx, serverID, zoneID, set
func (_m *Client) AddRecordSetToZone(ctx context.Context, serverID string, zoneID string, set zones.ResourceRecordSet) error {
	ret := _m.Called(ctx, serverID, zoneID, set)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, zones.ResourceRecordSet) error); ok {
		r0 = rf(ctx, serverID, zoneID, set)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateZone provides a mock function with given fields: ctx, serverID, zone
func (_m *Client) CreateZone(ctx context.Context, serverID string, zone zones.Zone) (*zones.Zone, error) {
	ret := _m.Called(ctx, serverID, zone)

	var r0 *zones.Zone
	if rf, ok := ret.Get(0).(func(context.Context, string, zones.Zone) *zones.Zone); ok {
		r0 = rf(ctx, serverID, zone)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zones.Zone)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, zones.Zone) error); ok {
		r1 = rf(ctx, serverID, zone)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteZone provides a mock function with given fields: ctx, serverID, zoneID
func (_m *Client) DeleteZone(ctx context.Context, serverID string, zoneID string) error {
	ret := _m.Called(ctx, serverID, zoneID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, serverID, zoneID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExportZone provides a mock function with given fields: ctx, serverID, zoneID
func (_m *Client) ExportZone(ctx context.Context, serverID string, zoneID string) ([]byte, error) {
	ret := _m.Called(ctx, serverID, zoneID)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []byte); ok {
		r0 = rf(ctx, serverID, zoneID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, serverID, zoneID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetZone provides a mock function with given fields: ctx, serverID, zoneID
func (_m *Client) GetZone(ctx context.Context, serverID string, zoneID string) (*zones.Zone, error) {
	ret := _m.Called(ctx, serverID, zoneID)

	var r0 *zones.Zone
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *zones.Zone); ok {
		r0 = rf(ctx, serverID, zoneID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zones.Zone)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, serverID, zoneID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListZone provides a mock function with given fields: ctx, serverID, zoneID
func (_m *Client) ListZone(ctx context.Context, serverID string, zoneID string) ([]zones.Zone, error) {
	ret := _m.Called(ctx, serverID, zoneID)

	var r0 []zones.Zone
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []zones.Zone); ok {
		r0 = rf(ctx, serverID, zoneID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]zones.Zone)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, serverID, zoneID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListZones provides a mock function with given fields: ctx, serverID
func (_m *Client) ListZones(ctx context.Context, serverID string) ([]zones.Zone, error) {
	ret := _m.Called(ctx, serverID)

	var r0 []zones.Zone
	if rf, ok := ret.Get(0).(func(context.Context, string) []zones.Zone); ok {
		r0 = rf(ctx, serverID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]zones.Zone)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, serverID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotifySlaves provides a mock function with given fields: ctx, serverID, zoneID
func (_m *Client) NotifySlaves(ctx context.Context, serverID string, zoneID string) error {
	ret := _m.Called(ctx, serverID, zoneID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, serverID, zoneID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RectifyZone provides a mock function with given fields: ctx, serverID, zoneID
func (_m *Client) RectifyZone(ctx context.Context, serverID string, zoneID string) error {
	ret := _m.Called(ctx, serverID, zoneID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, serverID, zoneID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveRecordSetFromZone provides a mock function with given fields: ctx, serverID, zoneID, name, recordType
func (_m *Client) RemoveRecordSetFromZone(ctx context.Context, serverID string, zoneID string, name string, recordType string) error {
	ret := _m.Called(ctx, serverID, zoneID, name, recordType)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, serverID, zoneID, name, recordType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RetrieveFromMaster provides a mock function with given fields: ctx, serverID, zoneID
func (_m *Client) RetrieveFromMaster(ctx context.Context, serverID string, zoneID string) error {
	ret := _m.Called(ctx, serverID, zoneID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, serverID, zoneID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyZone provides a mock function with given fields: ctx, serverID, zoneID
func (_m *Client) VerifyZone(ctx context.Context, serverID string, zoneID string) error {
	ret := _m.Called(ctx, serverID, zoneID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, serverID, zoneID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
