// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	cache "github.com/mittwald/go-powerdns/apis/cache"

	cryptokeys "github.com/mittwald/go-powerdns/apis/cryptokeys"

	mock "github.com/stretchr/testify/mock"

	search "github.com/mittwald/go-powerdns/apis/search"

	servers "github.com/mittwald/go-powerdns/apis/servers"

	zones "github.com/mittwald/go-powerdns/apis/zones"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Cache provides a mock function with given fields:
func (_m *Client) Cache() cache.Client {
	ret := _m.Called()

	var r0 cache.Client
	if rf, ok := ret.Get(0).(func() cache.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.Client)
		}
	}

	return r0
}

// Cryptokeys provides a mock function with given fields:
func (_m *Client) Cryptokeys() cryptokeys.Client {
	ret := _m.Called()

	var r0 cryptokeys.Client
	if rf, ok := ret.Get(0).(func() cryptokeys.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cryptokeys.Client)
		}
	}

	return r0
}

// Search provides a mock function with given fields:
func (_m *Client) Search() search.Client {
	ret := _m.Called()

	var r0 search.Client
	if rf, ok := ret.Get(0).(func() search.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(search.Client)
		}
	}

	return r0
}

// Servers provides a mock function with given fields:
func (_m *Client) Servers() servers.Client {
	ret := _m.Called()

	var r0 servers.Client
	if rf, ok := ret.Get(0).(func() servers.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(servers.Client)
		}
	}

	return r0
}

// Status provides a mock function with given fields:
func (_m *Client) Status() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilUp provides a mock function with given fields: ctx
func (_m *Client) WaitUntilUp(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Zones provides a mock function with given fields:
func (_m *Client) Zones() zones.Client {
	ret := _m.Called()

	var r0 zones.Client
	if rf, ok := ret.Get(0).(func() zones.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(zones.Client)
		}
	}

	return r0
}
